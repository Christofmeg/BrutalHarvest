import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = "${mod_id}-forge-${forge_supported_versions}"

minecraft {
//    mappings channel: 'official', version: forge_minecraft_version
    mappings channel: 'parchment', version: parchment_version

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', mod_id, '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file("${project(':Common').projectDir}/src/main/resources/"),
                    '--existing', file('src/generated/resources/')
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_minecraft_version}-${forge_version}"
    compileOnly project(":Common")

    // CATALOGUE
    if (project.hasProperty('catalogue_version')) {
        implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")
    }

    // JADE
    if (project.hasProperty('jade_version')) {
        implementation fg.deobf("curse.maven:jade-324717:${jade_version}")
    }

    // JEI
    if (project.hasProperty('jei_version')) {
        compileOnly(fg.deobf("mezz.jei:jei-${forge_minecraft_version}-common-api:${jei_version}"))
        compileOnly(fg.deobf("mezz.jei:jei-${forge_minecraft_version}-forge-api:${jei_version}"))
        compileOnly fg.deobf("me.shedaniel:REIPluginCompatibilities-forge-annotations:${rei_version}")
        if (project.hasProperty('enable_jei') && project.enable_jei.toBoolean()) {
            runtimeOnly(fg.deobf("mezz.jei:jei-${forge_minecraft_version}-forge:${jei_version}"))
//            implementation fg.deobf("curse.maven:just-enough-resources-jer-240630:${jer_version}")
        }
    }

    // REI
    if (project.hasProperty('rei_version') &&
            project.hasProperty('cloth_config_version') &&
            project.hasProperty('architectury_version')) {
        compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:${rei_version}")
        compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:${rei_version}")
        implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}")
        implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
        if (project.hasProperty('enable_rei') && project.enable_rei.toBoolean()) {
            runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:${rei_version}")
        }
    }

    // EMI
    if (project.hasProperty('emi_version')) {
        compileOnly fg.deobf("curse.maven:emi-580555:${emi_version}")
        //    compileOnly "dev.emi:emi-forge:${emi_version}+${forge_minecraft_version}"
        if (project.hasProperty('enable_emi') && project.enable_emi.toBoolean()) {
            //        runtimeOnly "dev.emi:emi-forge:${emi_version}+${forge_minecraft_version}"
            runtimeOnly fg.deobf("curse.maven:emi-580555:${emi_version}")
        }
    }

//    runtimeOnly fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:5279325")
//    runtimeOnly fg.deobf("curse.maven:farmers-delight-398521:5051242")

    runtimeOnly fg.deobf("curse.maven:immersive-engineering-231951:5224387")
    runtimeOnly fg.deobf("curse.maven:appleskin-248787:4770828")
    runtimeOnly fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:5186339")
//    runtimeOnly fg.deobf("curse.maven:just-enough-resources-jer-240630:5057220") //TODO look into adding village loot to JER pages


}

processResources {
    from project(":Common").sourceSets.main.resources
    exclude '.cache'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            file: 'META-INF/mods.toml',
            version: version
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

jar.finalizedBy('reobfJar')

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = file('../../API Tokens/noblazeknockback.md')
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('changelog.md')
    mainFile.addGameVersion('Client', 'Server')
    mainFile.releaseType = "${release_type}"
    "${forge_release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addModLoader('Forge', 'NeoForge')
    mainFile.addOptional("catalogue")
    mainFile.addOptional("farmers-delight")
}

modrinth {
    def tokenText = file('../../API Tokens/modrinth.md')
    if (tokenText.exists()) {
        token = tokenText.text
    } else {
        token = ""
    }
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('changelog.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    gameVersions = "${forge_release_versions}".split(",") as List<String>
    dependencies {
        optional.project "farmers-delight"
    }
    loaders = "forge,neoforge".split(",") as List<String>
}